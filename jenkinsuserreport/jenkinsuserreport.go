package jenkinsuserreport

import (
	"fmt"
	"github.com/bndr/gojenkins"
	"github.com/magiconair/properties"
	"log"
)

// or through Decode
type Config struct {
	JenkinsHost  string `properties:"jenkinshost"`
	JenkinsToken string `properties:"jenkinstoken"`
	JenkinsUser string `properties:"jenkinsuser"`
	JenkinsPassword string `properties:"jenkinspassword"`
}


/*


http://10.129.102.84:8080/asynchPeople/api/json?depth=1
type AutoGenerated struct {
	Class string `json:"_class"`
	Users []struct {
		LastChange interface{} `json:"lastChange"`
		Project    interface{} `json:"project"`
		User       struct {
			AbsoluteURL string `json:"absoluteUrl"`
			FullName    string `json:"fullName"`
		} `json:"user"`
	} `json:"users"`
}
 */

var cfg Config

func JenkinsUserReport(propPtr string) {

	fmt.Printf("%%%%%%%%%%  JenkinsUserReport %%%%%%%%%%%%%%\n")

	p := properties.MustLoadFile(propPtr, properties.ISO_8859_1)

	if err := p.Decode(&cfg); err != nil {
		log.Fatal(err)
	}

//	jenkins, err := gojenkins.CreateJenkins(nil, cfg.JenkinsHost, cfg.JenkinsToken).Init()
	jenkins, err := gojenkins.CreateJenkins(nil, cfg.JenkinsHost, cfg.JenkinsUser, cfg.JenkinsPassword).Init()
	if err != nil {
		log.Fatalf("Failed to create client: %v", err)
	}
/*
	jobs, err := jenkins.GetAllJobs()
	if err != nil {
		log.Fatalf("Failed to create client: %v", err)
	}
	for _, job := range jobs {

		fmt.Printf("Group: %s\n", job.Base)
	}
*/
	users, err := jenkins.GetAsynchPeople()
	if err != nil {
		log.Fatalf("Failed to create client: %v", err)
	}
	for _, user := range users.Raw.Users {

		fmt.Printf("Group: %s\n", user.User.FullName)
	}
}
